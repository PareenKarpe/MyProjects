/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StaffRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.*;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.SoilTestWorkRequest;
import Business.WorkQueue.WaterTestingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author raunak
 */
public class StaffWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private staffOrganisation staffOrganization;
    private Enterprise enterprise;
    private Network network;
//    private HeadScientistOrganisation headScientistOrg;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
	 * Added by anuja
     */
  /*  public StaffWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.staffOrganization = (staffOrganisation)organization;
        
        populateTable();
    }*/
    
    public StaffWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Network network, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.staffOrganization = (staffOrganisation)organization;
//     //   this.headScientistOrg = (HeadScientistOrganisation) organization;
        this.enterprise = enterprise;
        this.network=network;
        userlbl.setText(account.getEmployee().getName().toUpperCase());
        valueLabel.setText(enterprise.getName());
        populateTable();
   //     populateTree(); 
             processJButton.setEnabled(false);
viewButton.setEnabled(false);
assignJButton.setEnabled(false);
    }
    
    public void populateTable(){
        processJButton.setEnabled(false);
viewButton.setEnabled(false);
assignJButton.setEnabled(false);
        
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : staffOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            row[4] = request.getSenderEnterprise();
            model.addRow(row);
        }
    }
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        enterpriseLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        enterpriseLabel2 = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        userlbl = new javax.swing.JLabel();
        viewButton = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel1.setText("EnterPrise :");

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setBackground(new java.awt.Color(255, 255, 204));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Sender Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                workRequestJTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, 680, 96));

        assignJButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 390, 140, 40));

        processJButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 380, 110, 50));

        refreshJButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 110, 40));

        enterpriseLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        add(enterpriseLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        valueLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, -1, -1));

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel1.setText(" Department ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 210, -1));

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel2.setText("  Employee Dashboard");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 250, -1));

        jLabel3.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel3.setText("User : ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, 140, -1));
        add(userlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 100, 20));

        viewButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });
        add(viewButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 390, 90, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateTable();
        processJButton.setEnabled(true);
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
       int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        if(enterprise.getEnterpriseType().getValue().equalsIgnoreCase("air"))
        {
            LabTestWorkRequest request = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
     
            request.setStatus("Processing");
            ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
            userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        
        if(enterprise.getEnterpriseType().getValue().equalsIgnoreCase("Water"))
        {
            WaterTestingWorkRequest request = (WaterTestingWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
            request.setStatus("Processing");
            request.setSenderEnterprise(enterprise.getEnterpriseType().getValue());
            
            ProcessWaterWorkRequestJPanel processWaterWorkRequestJPanel = new ProcessWaterWorkRequestJPanel(userProcessContainer,userAccount, enterprise, network, request);
            userProcessContainer.add("processWorkRequestJPanel", processWaterWorkRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }

        //Process the soil request
        if(enterprise.getEnterpriseType().getValue().equalsIgnoreCase("soil"))
        {
            SoilTestWorkRequest request2 = (SoilTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
     
            request2.setStatus("Processing");
            request2.setSenderEnterprise(enterprise.getEnterpriseType().getValue()); //Set the enterprise type to forward the same in Lab's WorkArea

            ProcessSoilWorkRequestJPanel processSoilWorkRequestJPanel = new ProcessSoilWorkRequestJPanel(userProcessContainer,userAccount,enterprise, network, request2);
            userProcessContainer.add("processSoilWorkRequestJPanel", processSoilWorkRequestJPanel);
            CardLayout layout2 = (CardLayout) userProcessContainer.getLayout();
            layout2.next(userProcessContainer);   
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void workRequestJTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workRequestJTableMousePressed
        // TODO add your handling code here:
              int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow < 0)
        {
            return;
        }
        String user = (String)workRequestJTable.getValueAt(selectedRow, 2);
        String status = (String)workRequestJTable.getValueAt(selectedRow, 3);
       
     //   String user = reciever.getUsername();
        //   System.out.print(sender);
        if (user == null)
        {
            assignJButton.setEnabled(true);
    
            processJButton.setEnabled(false);
        }
        else
        {
            assignJButton.setEnabled(false);
            processJButton.setEnabled(true);
        }
if(status.contains("Sent") || status.contains("sent"))
{
assignJButton.setEnabled(true);
    
    
}
else{
    assignJButton.setEnabled(false);
}
if(status.equalsIgnoreCase("completed"))
{
    viewButton.setEnabled(true);
     processJButton.setEnabled(false);
}
    else
{
     viewButton.setEnabled(false);
    //  processJButton.setEnabled(true);
}
  
        
    }//GEN-LAST:event_workRequestJTableMousePressed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
                return;
            }
            
        if(enterprise.getEnterpriseType().getValue().equalsIgnoreCase("soil"))
        {
            SoilTestWorkRequest request2 = (SoilTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
            
            if(!"completed".equalsIgnoreCase(request2.getStatus()))
            {
                JOptionPane.showMessageDialog(null, "Request is not yet completed to view", "Error", JOptionPane.INFORMATION_MESSAGE);    
            }
            else
            {
                ProcessSoilWorkViewJPanel processSoilWorkViewJPanel = new ProcessSoilWorkViewJPanel( userProcessContainer, userAccount, enterprise, network, request2);
                userProcessContainer.add("processSoilWorkViewJPanel", processSoilWorkViewJPanel);
                CardLayout layout2 = (CardLayout) userProcessContainer.getLayout();
                layout2.next(userProcessContainer); 
                
            }  
        }
        if(enterprise.getEnterpriseType().getValue().equalsIgnoreCase("water"))
        {
            WaterTestingWorkRequest request2 = (WaterTestingWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
            
            if(!"completed".equalsIgnoreCase(request2.getStatus()))
            {
                JOptionPane.showMessageDialog(null, "Request is not yet completed to view", "Error", JOptionPane.INFORMATION_MESSAGE);    
            }
            else
            {
                ProcessWaterWorkViewJPanel1 processWaterWorkViewJPanel1 = new ProcessWaterWorkViewJPanel1(userProcessContainer, userAccount, enterprise, network, request2);
                userProcessContainer.add("processSoilWorkViewJPanel", processWaterWorkViewJPanel1);
                CardLayout layout2 = (CardLayout) userProcessContainer.getLayout();
                layout2.next(userProcessContainer); 
                
            }  
        }
        //air view code
        
        if(enterprise.getEnterpriseType().getValue().equalsIgnoreCase("air"))
        {
            LabTestWorkRequest request2 = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
            
            if(!"completed".equalsIgnoreCase(request2.getStatus()))
            {
                JOptionPane.showMessageDialog(null, "Request is not yet completed to view", "Error", JOptionPane.INFORMATION_MESSAGE);    
            }
            else
            {
                ProcessWorkRequestAirView ProcessWorkRequestAirView = new ProcessWorkRequestAirView( userProcessContainer,  request2);
                userProcessContainer.add("ProcessWorkRequestAirView", ProcessWorkRequestAirView);
                CardLayout layout2 = (CardLayout) userProcessContainer.getLayout();
                layout2.next(userProcessContainer); 
                
            }  
        } 
    }//GEN-LAST:event_viewButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JLabel enterpriseLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel userlbl;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JButton viewButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
